
# Load required libraries
suppressPackageStartupMessages({
  if (!require(pacman)) install.packages("pacman")
  pacman::p_load(
    dplyr, readr, data.table,
    ggplot2, gridExtra, viridis,
    tidyr, lubridate, stringr, googledrive
  )
})

# ===================================================================
# PHASE 1: CSV COMBINATION
# ===================================================================

combine_navs_csvs <- function(folder_path = "C:/Users/bengi/OneDrive/Desktop/Test/Navs CSVs") {
  
  cat("COMBINING CSV FILES\n")
  cat("===========================\n")
  cat("Looking in folder:", folder_path, "\n")
  
  # Set working directory
  if (dir.exists(folder_path)) {
    setwd(folder_path)
    cat("Working directory set to:", getwd(), "\n")
  } else {
    cat("Folder not found:", folder_path, "\n")
    return(NULL)
  }
  
  # Find all CSV files
  csv_files <- list.files(pattern = "\\.csv$", full.names = FALSE)
  
  if (length(csv_files) == 0) {
    cat("No CSV files found in the folder.\n")
    return(NULL)
  }
  
  cat("Data Found", length(csv_files), "CSV files\n")
  
  # Initialize combined data
  combined_data <- data.frame()
  
  # Process each CSV file
  for (i in 1:length(csv_files)) {
    file <- csv_files[i]
    cat("Processing:", file, "\n")
    
    tryCatch({
      current_data <- read_csv(file, show_col_types = FALSE)
      
      # Standardize column names
      required_cols <- c("ExitSpeed", "Angle", "PlayResult")
      alternative_names <- list(
        ExitSpeed = c("ExitSpeed", "Exit_Speed", "exit_speed", "EV", "ev"),
        Angle = c("Angle", "Launch_Angle", "launch_angle", "LA", "la"),
        PlayResult = c("PlayResult", "Play_Result", "play_result", "Result", "result", "Outcome", "outcome")
      )
      
      for (req_col in required_cols) {
        possible_names <- alternative_names[[req_col]]
        for (alt_name in possible_names) {
          if (alt_name %in% names(current_data) && !req_col %in% names(current_data)) {
            names(current_data)[names(current_data) == alt_name] <- req_col
            break
          }
        }
      }
      
      # Add source file info
      current_data$source_file <- file
      current_data$file_index <- i
      
      # Combine data
      if (nrow(combined_data) == 0) {
        combined_data <- current_data
      } else {
        combined_data <- bind_rows(combined_data, current_data)
      }
      
      cat("  Added", nrow(current_data), "rows\n")
      
    }, error = function(e) {
      cat("  Error:", e$message, "\n")
    })
  }
  
  cat("Combined", nrow(combined_data), "total rows from", length(csv_files), "files\n")
  return(combined_data)
}


clean_and_standardize_data <- function(combined_data) {
  
  cat("\n=== DATA CLEANING AND STANDARDIZATION ===\n")
  
  if (is.null(combined_data) || nrow(combined_data) == 0) {
    cat("No data provided for cleaning\n")
    return(NULL)
  }
  
  cat("Starting with", nrow(combined_data), "balls in play\n")
  
  # Check for required columns
  required_cols <- c("ExitSpeed", "Angle", "PlayResult")
  missing_cols <- required_cols[!required_cols %in% names(combined_data)]
  if (length(missing_cols) > 0) {
    cat("Missing required columns:", paste(missing_cols, collapse = ", "), "\n")
    return(NULL)
  }
  
  # Data cleaning pipeline
  clean_data <- combined_data %>%
    # Remove invalid exit velocities
    filter(!is.na(ExitSpeed), ExitSpeed >= 20, ExitSpeed <= 120) %>%
    # Remove invalid launch angles  
    filter(!is.na(Angle), Angle >= -90, Angle <= 90) %>%
    # Standardize outcome names
    mutate(
      outcome_clean = case_when(
        PlayResult %in% c("Single", "single", "1B") ~ "single",
        PlayResult %in% c("Double", "double", "2B") ~ "double", 
        PlayResult %in% c("Triple", "triple", "3B") ~ "triple",
        PlayResult %in% c("HomeRun", "home_run", "HR", "Home Run") ~ "home_run",
        PlayResult %in% c("Out", "out", "O") ~ "out",
        TRUE ~ "unknown"
      )
    ) %>%
    # Keep only valid outcomes
    filter(outcome_clean != "unknown") %>%
    # Add data quality flags
    mutate(
      ev_outlier = ExitSpeed > quantile(ExitSpeed, 0.99) | ExitSpeed < quantile(ExitSpeed, 0.01),
      la_outlier = abs(Angle) > quantile(abs(Angle), 0.99),
      data_quality = case_when(
        ev_outlier | la_outlier ~ "outlier",
        TRUE ~ "clean"
      )
    )
  
  # Data summary
  cat("Clean data summary:\n")
  cat("  - Total clean BIP:", nrow(clean_data), "\n")
  outcome_summary <- table(clean_data$outcome_clean)
  print(outcome_summary)
  
  return(clean_data)
}


engineer_xwoba_features <- function(clean_data) {
  
  cat("\n=== FEATURE ENGINEERING ===\n")
  
  # Extract key variables
  ev <- clean_data$ExitSpeed
  la <- clean_data$Angle
  n <- length(ev)
  
  # Physics calculations
  la_rad <- la * pi / 180
  
  cat("ðŸ”§ Creating feature categories:\n")
  
  # 1. RAW MEASUREMENTS
  cat("  - Raw measurements\n")
  raw_features <- data.frame(
    exit_velocity = ev,
    launch_angle = la
  )
  
  # 2. POLYNOMIAL FEATURES
  cat("  - Polynomial features\n")
  poly_features <- data.frame(
    ev_squared = ev^2,
    ev_cubed = ev^3,
    la_squared = la^2,
    la_cubed = la^3
  )
  
  # 3. INTERACTION FEATURES
  cat("  - Interaction features\n")
  interaction_features <- data.frame(
    ev_la = ev * la,
    ev_la_squared = ev * la^2,
    ev_squared_la = ev^2 * la,
    ev_squared_la_squared = ev^2 * la^2
  )
  
  # 4. Distance/Movementbased features
  cat("  - Physics-based features\n")
  physics_features <- data.frame(
    ev_la_ratio = ev / (abs(la) + 1),
    optimal_distance = sqrt((ev - 100)^2 + (la - 25)^2),
    sweet_spot_score = 1 / (1 + sqrt((ev - 100)^2 + (la - 25)^2)),
    optimal_angle_diff = abs(la - 25),
    angle_efficiency = cos(la_rad) * ev / 100,
    velocity_percentile = rank(ev) / n,
    angle_percentile = rank(la) / n
  )
  
  # 5. Trig featuree
  cat("  - Trigonometric features\n")
  trig_features <- data.frame(
    la_sin = sin(la_rad),
    la_cos = cos(la_rad),
    la_tan = tan(la_rad),
    ev_sin = ev * sin(la_rad),
    ev_cos = ev * cos(la_rad)
  )
  
  # 6. CATEGORICAL FEATURES
  cat("  - Categorical features\n")
  categorical_features <- data.frame(
    ev_elite = as.numeric(ev >= 100),
    ev_hard = as.numeric(ev >= 95 & ev < 100),
    ev_medium = as.numeric(ev >= 80 & ev < 95),
    ev_soft = as.numeric(ev < 80),
    la_popup = as.numeric(la > 50),
    la_flyball = as.numeric(la > 25 & la <= 50),
    la_line_drive = as.numeric(la >= 10 & la <= 25),
    la_ground_ball = as.numeric(la < 10),
    barrel = as.numeric(ev >= 98 & la >= 8 & la <= 32),
    solid_contact = as.numeric(ev >= 90 & la >= 8 & la <= 40),
    weak_contact = as.numeric(ev < 70 | abs(la) > 45)
  )
  
  # 7. STATISTICAL FEATURES
  cat("  - Statistical features\n")
  statistical_features <- data.frame(
    ev_z_score = scale(ev)[,1],
    la_z_score = scale(la)[,1],
    ev_rank = rank(ev),
    la_rank = rank(la)
  )
  
  # 8. DOMAIN-SPECIFIC FEATURES
  cat("  - Domain-specific features\n")
  domain_features <- data.frame(
    hr_zone = as.numeric(ev >= 100 & la >= 20 & la <= 35),
    double_zone = as.numeric(ev >= 90 & la >= 10 & la <= 25),
    out_zone_popup = as.numeric(la > 45),
    out_zone_weak = as.numeric(ev < 70),
    high_value_zone = as.numeric(ev >= 90 & la >= 10 & la <= 40)
  )
  
  # 9. SWEET SPOT FEATURES
  cat("  - Sweet spot analysis features\n")
  sweet_spot_features <- data.frame(
    sweet_spot_gradient = exp(-((ev - 100)^2 / 100 + (la - 25)^2 / 100)),
    barrel_plus = as.numeric(ev >= 100 & la >= 10 & la <= 30),
    elite_contact = as.numeric(ev >= 105 & la >= 15 & la <= 35),
    power_zone = as.numeric(ev >= 98 & la >= 22 & la <= 38),
    expected_distance_long = as.numeric(ev >= 95 & la >= 10 & la <= 40)
  )
  
  # Combine all features
  all_features <- cbind(
    raw_features,
    poly_features, 
    interaction_features,
    physics_features,
    trig_features,
    categorical_features,
    statistical_features,
    domain_features,
    sweet_spot_features
  )
  
  cat("Feature engineering complete; Created", ncol(all_features), "features\n")
  
  return(all_features)
}


# PHASE 4: SWEET SPOT ANALYSIS

analyze_sweet_spots <- function(clean_data, features) {
  
  cat("\n=== SWEET SPOT ANALYSIS ===\n")
  
  # Extract key variables
  ev <- clean_data$ExitSpeed
  la <- clean_data$Angle
  outcome <- clean_data$outcome_clean
  
  # Calculate actual wOBA for each ball
  woba_weights <- list(single = 0.888, double = 1.271, triple = 1.616, home_run = 2.101, out = 0.000)
  actual_woba <- ifelse(outcome == "single", woba_weights$single,
                ifelse(outcome == "double", woba_weights$double,
                ifelse(outcome == "triple", woba_weights$triple,
                ifelse(outcome == "home_run", woba_weights$home_run, woba_weights$out))))
  
  # Create EV/LA grid analysis
  cat("Creating EV/LA performance grid...\n")
  
  ev_bins <- seq(20, 120, by = 10)
  la_bins <- seq(-90, 90, by = 10)
  
  sweet_spot_grid <- data.frame()
  
  for (i in 1:(length(ev_bins)-1)) {
    for (j in 1:(length(la_bins)-1)) {
      ev_range <- c(ev_bins[i], ev_bins[i+1])
      la_range <- c(la_bins[j], la_bins[j+1])
      
      mask <- ev >= ev_range[1] & ev < ev_range[2] & la >= la_range[1] & la < la_range[2]
      
      if (sum(mask) >= 5) {
        sweet_spot_grid <- rbind(sweet_spot_grid, data.frame(
          ev_min = ev_range[1], ev_max = ev_range[2],
          la_min = la_range[1], la_max = la_range[2],
          sample_count = sum(mask),
          mean_woba = mean(actual_woba[mask]),
          hr_rate = mean(outcome[mask] == "home_run"),
          hit_rate = mean(outcome[mask] != "out")
        ))
      }
    }
  }
  
  # Sweet spot scoring
  sweet_spot_scores <- data.frame(
    exit_velocity = ev,
    launch_angle = la,
    actual_outcome = outcome,
    actual_woba = actual_woba,
    combined_score = (pmin(1, pmax(0, (ev - 60) / 40)) * 0.6 +
                     ifelse(la >= 10 & la <= 35, 1,
                            ifelse(la < 10, la / 10, 
                                   ifelse(la > 35, (90 - la) / 55, 0))) * 0.4)
  )
  
  cat("âœ… Sweet spot analysis complete!\n")
  
  return(list(
    grid_analysis = sweet_spot_grid,
    sweet_spot_scores = sweet_spot_scores
  ))
}


prepare_ml_training_datasets <- function(clean_data, features, sweet_spot_analysis) {
  
  cat("\n=== PREPARING ML TRAINING DATASETS ===\n")
  
  # 2024 MLB wOBA weights (can add other stuff as time goes)
  woba_weights <- list(
    single = 0.888,
    double = 1.271,
    triple = 1.616, 
    home_run = 2.101,
    out = 0.000
  )
  
  # Create binary target variables
  targets <- data.frame(
    is_single = as.numeric(clean_data$outcome_clean == "single"),
    is_double = as.numeric(clean_data$outcome_clean == "double"),
    is_triple = as.numeric(clean_data$outcome_clean == "triple"), 
    is_homerun = as.numeric(clean_data$outcome_clean == "home_run"),
    is_out = as.numeric(clean_data$outcome_clean == "out")
  )
  
  # Calculate actual wOBA
  actual_woba <- ifelse(clean_data$outcome_clean == "single", woba_weights$single,
                ifelse(clean_data$outcome_clean == "double", woba_weights$double,
                ifelse(clean_data$outcome_clean == "triple", woba_weights$triple,
                ifelse(clean_data$outcome_clean == "home_run", woba_weights$home_run,
                woba_weights$out))))
  
  # Create training package
  training_package <- list(
    features = features,
    targets = targets,
    outcomes = clean_data$outcome_clean,
    actual_woba = actual_woba,
    sweet_spot_data = sweet_spot_analysis,
    raw_measurements = data.frame(
      exit_velocity = clean_data$ExitSpeed,
      launch_angle = clean_data$Angle,
      outcome_clean = clean_data$outcome_clean
    ),
    metadata = list(
      total_samples = nrow(clean_data),
      feature_count = ncol(features),
      woba_weights = woba_weights,
      outcome_distribution = table(clean_data$outcome_clean),
      data_date_created = Sys.time()
    )
  )
  
  cat("Training package complete:\n")
  cat("  - Samples:", nrow(clean_data), "\n")
  cat("  - Features:", ncol(features), "\n")
  cat("  - Mean wOBA:", round(mean(actual_woba), 3), "\n")
  
  return(training_package)
}

# ===================================================================
# MAIN PIPELINE FUNCTION
# ===================================================================

run_complete_xwoba_pipeline <- function(folder_path = "C:/Users/bengi/OneDrive/Desktop/Test/Navs CSVs") {
  
  cat("STARTING COMPLETE xwOBA PIPELINE\n")
  cat("====================================\n")
  
  # Phase 1: Combine CSV files
  cat("\nPHASE 1: COMBINING CSV FILES\n")
  combined_data <- combine_navs_csvs(folder_path)
  if (is.null(combined_data)) return(NULL)
  
  # Save combined data
  saveRDS(combined_data, "navs_all_data.rds")
  cat("Saved combined data as navs_all_data.rds\n")
  
  # Phase 2: Clean and standardize
  cat("\nPHASE 2: DATA CLEANING\n")
  clean_data <- clean_and_standardize_data(combined_data)
  if (is.null(clean_data)) return(NULL)
  
  # Phase 3: Feature engineering
  cat("\n PHASE 3: FEATURE ENGINEERING\n")
  features <- engineer_xwoba_features(clean_data)
  
  # Phase 4: Sweet spot analysis
  cat("\n PHASE 4: SWEET SPOT ANALYSIS\n")
  sweet_spot_analysis <- analyze_sweet_spots(clean_data, features)
  
  # Phase 5: Prepare training datasets
  cat("\n PHASE 5: TRAINING DATA PREPARATION\n")
  training_package <- prepare_ml_training_datasets(clean_data, features, sweet_spot_analysis)
  
  # Save final package
  final_package <- list(
    training_data = training_package,
    clean_data = clean_data,
    engineered_features = features,
    sweet_spot_analysis = sweet_spot_analysis
  )
  
  saveRDS(final_package, "xwoba_data_engineering_package.rds")
  write.csv(cbind(training_package$features, training_package$targets), 
            "xwoba_training_data.csv", row.names = FALSE)
  

  cat("=====================\n")
  cat("Combined", nrow(clean_data), "balls in play\n")
  cat("Created", ncol(features), "features\n")
  cat("Sweet spot analysis complete\n")
  cat("Files created:\n")
  cat("   - xwoba_data_engineering_package.rds\n")
  cat("   - xwoba_training_data.csv\n")
  cat("   - navs_all_data.rds\n")
  
  return(final_package)
}

