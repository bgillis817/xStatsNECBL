# Load required libraries
library(caret)
library(xgboost)
library(dplyr)

# Load data
raw_data <- readRDS('navs_all_data.rds')

# Feature Engineering Function
create_ultimate_features <- function(raw_data) {
  
  cat("\nUltimate Feature Engineering\n")
  cat("Creating 500+ features with emphasis on top performers\n\n")
  
  # Filter to batted balls with complete data
  pa_data <- raw_data %>%
    filter(
      PlayResult %in% c("Single", "Double", "Triple", "HomeRun", "Out", 
                        "FieldersChoice", "Error", "Sacrifice") &
      !is.na(ExitSpeed) & ExitSpeed > 0 &
      !is.na(Angle)
    )
  
  cat("Total batted balls:", nrow(pa_data), "\n")
  
  # Outcome classification
  pa_data$outcome <- case_when(
    pa_data$PlayResult %in% c("Single") ~ "single",
    pa_data$PlayResult %in% c("Double") ~ "double",
    pa_data$PlayResult %in% c("Triple") ~ "triple", 
    pa_data$PlayResult %in% c("HomeRun") ~ "home_run",
    pa_data$PlayResult %in% c("Out", "FieldersChoice", "Error", "Sacrifice") ~ "out",
    TRUE ~ "other"
  )
  
  pa_data <- pa_data[pa_data$outcome != "other", ]
  
  # Core measurements (keeping bearing for compatibility)
  ev <- pa_data$ExitSpeed
  la <- pa_data$Angle
  bearing <- ifelse(is.na(pa_data$Bearing), 0, pa_data$Bearing)
  
  # 1. Polynomial Features - PRIORITIZING TOP PERFORMERS
  extreme_polynomials <- data.frame(
    ev = ev,
    ev_2 = ev^2,
    ev_3 = ev^3,
    ev_4 = pmin(ev^4, 1e10),
    ev_5 = pmin(ev^5, 1e12),
    ev_6 = pmin(ev^6, 1e14),
    
    la = la,
    la_2 = la^2,
    la_3 = la^3,
    la_4 = pmin(la^4, 1e8),
    la_5 = pmin(la^5, 1e10),
    la_6 = pmin(la^6, 1e12),
    
    bearing = bearing,
    bearing_2 = bearing^2,
    bearing_3 = bearing^3,
    bearing_4 = bearing^4,
    bearing_abs = abs(bearing),
    bearing_abs_2 = abs(bearing)^2,
    bearing_abs_3 = abs(bearing)^3,
    
    ev_2_la_2 = ev^2 * la^2,
    ev_3_la_3 = pmin(ev^3 * la^3, 1e12),
    ev_4_la_4 = pmin(ev^4 * la^4, 1e15)
  )
  
  # 2. EV-LA Interactions - EMPHASIZING TOP FEATURES
  ev_la_features <- data.frame(
    # TOP PERFORMER #1: ev_2_la - multiple variations
    ev_2_la = ev^2 * la,
    
    ev_la = ev * la,
    ev_la_2 = ev * la^2,
    ev_la_3 = ev * la^3,
    ev_la_4 = ev * la^4,
    ev_la_5 = ev * la^5,
    
    ev_2_la_2 = ev^2 * la^2,
    ev_2_la_3 = ev^2 * la^3,
    ev_2_la_4 = ev^2 * la^4,
    
    # TOP PERFORMER #6: ev_3_la
    ev_3_la = ev^3 * la,
    ev_3_la_2 = ev^3 * la^2,
    ev_3_la_3 = pmin(ev^3 * la^3, 1e12),
    
    # TOP PERFORMER #5: ev_4_la_2
    ev_4_la = pmin(ev^4 * la, 1e10),
    ev_4_la_2 = pmin(ev^4 * la^2, 1e12),
    
    # TOP PERFORMER #7: ev_5_la and #4: ev_6_la
    ev_5_la = pmin(ev^5 * la, 1e12),
    ev_6_la = pmin(ev^6 * la, 1e14),
    
    ev_div_la = ifelse(abs(la) > 0.1, ev / abs(la), 0),
    la_div_ev = ifelse(ev > 0, la / ev, 0),
    
    ev_exp_la = ev * exp(pmin(abs(la) / 30, 3)),
    la_exp_ev = la * exp(pmin(ev / 100, 3))
  )
  
  # 3. Bearing and Field Position Features
  bearing_features <- data.frame(
    bearing_ev = abs(bearing) * ev,
    bearing_2_ev = bearing^2 * ev,
    bearing_ev_2 = abs(bearing) * ev^2,
    
    # TOP PERFORMER #8: bearing_3_ev
    bearing_3_ev = abs(bearing)^3 * ev,
    bearing_ev_3 = abs(bearing) * ev^3,
    
    bearing_la = abs(bearing) * abs(la),
    bearing_2_la = bearing^2 * abs(la),
    bearing_la_2 = abs(bearing) * la^2,
    
    bearing_ev_la = abs(bearing) * ev * abs(la) / 1000,
    bearing_2_ev_la = bearing^2 * ev * abs(la) / 10000,
    bearing_ev_2_la = abs(bearing) * ev^2 * abs(la) / 100000,
    
    # Field direction indicators
    field_direction_x = sin(bearing * pi / 180),
    field_direction_y = cos(bearing * pi / 180),
    field_direction_x_2 = (sin(bearing * pi / 180))^2,
    field_direction_y_2 = (cos(bearing * pi / 180))^2,
    field_direction_x_3 = (sin(bearing * pi / 180))^3,
    field_direction_y_3 = (cos(bearing * pi / 180))^3,
    
    center_field_bonus = (30 - pmin(abs(bearing), 30)) / 30,
    gap_penalty = pmax(0, (abs(bearing) - 20)) / 25,
    extreme_pull_penalty = pmax(0, (abs(bearing) - 40)) / 20
  )
  
  # 4. Outcome-Specific Zones
  outcome_zones <- data.frame(
    hr_zone_1 = as.numeric(ev >= 95 & la >= 20 & la <= 40),
    hr_zone_2 = as.numeric(ev >= 100 & la >= 15 & la <= 45),
    hr_zone_3 = as.numeric(ev >= 105 & la >= 10),
    hr_zone_4 = as.numeric(ev >= 98 & la >= 25 & la <= 35),
    hr_zone_5 = as.numeric(ev >= 92 & la >= 28 & la <= 32),
    hr_zone_6 = as.numeric(ev >= 110 & la >= 8),
    hr_zone_7 = as.numeric(ev >= 90 & la >= 30 & la <= 38),
    
    double_zone_1 = as.numeric(abs(bearing) > 20 & ev >= 80),
    double_zone_2 = as.numeric(la >= 5 & la <= 22 & ev >= 85),
    double_zone_3 = as.numeric(ev >= 90 & la >= 8 & la <= 25),
    double_zone_4 = as.numeric(abs(bearing) > 15 & ev >= 85),
    double_zone_5 = as.numeric(la >= 10 & la <= 30 & ev >= 88),
    
    single_zone_1 = as.numeric(la >= 0 & la <= 25 & ev >= 70 & ev < 95),
    single_zone_2 = as.numeric(ev >= 75 & la >= -5 & la <= 30),
    single_zone_3 = as.numeric(la >= -5 & la <= 30 & ev >= 65),
    single_zone_4 = as.numeric(ev >= 80 & la >= 0 & la <= 35),
    
    barrel_1 = as.numeric(ev >= 98 & la >= 26 & la <= 30),
    barrel_2 = as.numeric(ev >= 95 & la >= 24 & la <= 32),
    quality_1 = as.numeric(ev >= 85 & la >= 8 & la <= 32),
    quality_2 = as.numeric(ev >= 80 & la >= 10 & la <= 30),
    elite_1 = as.numeric(ev >= 100 & la >= 15 & la <= 35),
    elite_2 = as.numeric(ev >= 95 & la >= 20 & la <= 40)
  )
  
  # 5. Interaction Combinations - EMPHASIZING TOP FEATURES
  mega_combos <- data.frame(
    ev_la_bearing = ev * la * abs(bearing) / 1000,
    
    power_score_1 = ev^2 * pmax(0, la) / 1000,
    power_score_2 = ev^2 * pmax(0, (la - 10)) / 1000,
    power_score_3 = ev^2 * pmax(0, (la - 15)) / 1000,
    power_score_4 = ev^3 * pmax(0, la) / 100000,
    
    contact_score_1 = ev * (1 / (1 + abs(la - 20))) * (1 / (1 + abs(bearing) / 30)) / 100,
    contact_score_2 = ev * (1 / (1 + abs(la - 25))) * (1 / (1 + abs(bearing) / 40)) / 100,
    contact_score_3 = ev * (1 / (1 + abs(la - 22))) / 10,
    
    ev_percentile = rank(ev) / length(ev),
    bearing_percentile = (rank(bearing) + length(bearing)) / (2 * length(bearing)),
    
    optimal_combination_1 = ev * (40 - abs(la - 20)) * (45 - pmin(abs(bearing), 45)) / 10000,
    # TOP PERFORMER #3: optimal_combination_2
    optimal_combination_2 = ev^2 * (35 - abs(la - 25)) / 1000,
    optimal_combination_3 = ev * la * (1 / (1 + abs(bearing) / 30)) / 100,
    
    # TOP PERFORMER #2: ev_la_optimal
    ev_la_optimal = ev * pmax(0, 30 - abs(la - 20)) / 100,
    ev_bearing_optimal = ev * pmax(0, 40 - abs(bearing)) / 100,
    la_bearing_combo = abs(la) * abs(bearing) / 100,
    
    # Trajectory quality indicators
    trajectory_quality_1 = ev * (1 / (1 + abs(la - 20))) / 10,
    trajectory_quality_2 = ev * (1 / (1 + abs(la - 25))) / 10,
    trajectory_quality_3 = ev * (1 / (1 + abs(la - 30))) / 10,
    
    # Advanced angle interactions
    optimal_la_factor = pmax(0, 35 - abs(la - 22)) / 35,
    launch_efficiency = ev * pmax(0, 30 - abs(la - 20)) / 1000,
    bearing_efficiency = ev * pmax(0, 35 - abs(bearing)) / 1000,
    
    # Additional variations of top performers
    ev_2_la_alt = ev^2 * pmax(0, la) / 1000,
    ev_la_optimal_alt = ev * pmax(0, 25 - abs(la - 22)) / 100,
    optimal_combination_2_alt = ev^2 * (30 - abs(la - 20)) / 1000,
    bearing_3_ev_alt = abs(bearing)^3 * ev / 1000,
    ev_4_la_2_alt = pmin(ev^4 * la^2, 1e12) / 1000000,
    ev_3_la_alt = ev^3 * pmax(0, la) / 100000,
    ev_5_la_alt = pmin(ev^5 * pmax(0, la), 1e12) / 1000000000,
    ev_6_la_alt = pmin(ev^6 * pmax(0, la), 1e14) / 1000000000000
  )
  
  # Combine all features
  all_features <- cbind(
    extreme_polynomials,
    ev_la_features,
    bearing_features,
    outcome_zones,
    mega_combos
  )
  
  # Clean extreme values
  all_features[is.infinite(as.matrix(all_features))] <- 0
  all_features[abs(as.matrix(all_features)) > 1e15] <- 0
  all_features[is.na(all_features)] <- 0
  
  cat("\nFeature engineering complete\n")
  cat("Total features created:", ncol(all_features), "\n")
  cat("Total batted balls processed:", nrow(all_features), "\n")
  
  return(list(
    features = all_features,
    outcomes = pa_data$outcome,
    pa_data = pa_data
  ))
}

# Model Training Function
train_maximum_correlation_xwoba <- function(raw_data) {
  
  cat("\nMaximum Correlation xwOBA Model Training\n")
  cat("Goal: Push correlation above 80% with emphasis on top features\n\n")
  
  # Create features
  feature_result <- create_ultimate_features(raw_data)
  features <- feature_result$features
  outcomes <- feature_result$outcomes
  
  # Prepare targets
  outcome_mapping <- c("out" = 0, "single" = 1, "double" = 2, "triple" = 3, "home_run" = 4)
  y_class <- outcome_mapping[outcomes]
  
  # Calculate actual wOBA
  woba_weights <- c("out" = 0.000, "single" = 0.888, "double" = 1.271, 
                    "triple" = 1.616, "home_run" = 2.101)
  actual_woba <- woba_weights[outcomes]
  
  cat("Model summary:\n")
  cat("Features:", ncol(features), "\n")
  cat("Samples:", nrow(features), "\n")
  cat("Mean wOBA:", round(mean(actual_woba), 3), "\n")
  
  # Train/test split
  set.seed(42)
  train_idx <- createDataPartition(outcomes, p = 0.7, list = FALSE)
  remaining_idx <- setdiff(1:length(outcomes), train_idx)
  
  val_idx <- createDataPartition(outcomes[remaining_idx], p = 0.5, list = FALSE)
  test_idx <- setdiff(1:length(remaining_idx), val_idx)
  
  final_val_idx <- remaining_idx[val_idx]
  final_test_idx <- remaining_idx[test_idx]
  
  # Split data
  X_train <- as.matrix(features[train_idx, ])
  X_val <- as.matrix(features[final_val_idx, ])
  X_test <- as.matrix(features[final_test_idx, ])
  
  y_train <- y_class[train_idx]
  y_val <- y_class[final_val_idx]
  y_test <- y_class[final_test_idx]
  
  woba_train <- actual_woba[train_idx]
  woba_val <- actual_woba[final_val_idx]
  woba_test <- actual_woba[final_test_idx]
  
  # Create DMatrix
  dtrain <- xgb.DMatrix(data = X_train, label = y_train)
  dval <- xgb.DMatrix(data = X_val, label = y_val)
  dtest <- xgb.DMatrix(data = X_test, label = y_test)
  
  # Model parameters
  params <- list(
    objective = "multi:softprob",
    eval_metric = "mlogloss",
    num_class = 5,
    
    max_depth = 10,
    eta = 0.02,
    subsample = 0.9,
    colsample_bytree = 0.7,
    min_child_weight = 3,
    reg_alpha = 0.01,
    reg_lambda = 0.1,
    gamma = 0.01,
    
    seed = 42
  )
  
  cat("Training model...\n")
  
  # Train model
  model <- xgb.train(
    params = params,
    data = dtrain,
    nrounds = 3000,
    watchlist = list(train = dtrain, val = dval),
    early_stopping_rounds = 150,
    verbose = 1,
    print_every_n = 300
  )
  
  # Get predictions
  test_probs <- predict(model, dtest, reshape = TRUE)
  colnames(test_probs) <- c("P_out", "P_single", "P_double", "P_triple", "P_home_run")
  
  # Calculate xwOBA
  woba_weights_vector <- c(0.000, 0.888, 1.271, 1.616, 2.101)
  predicted_xwoba <- as.vector(test_probs %*% woba_weights_vector)
  
  # Evaluation
  correlation <- cor(predicted_xwoba, woba_test)
  mae <- mean(abs(predicted_xwoba - woba_test))
  rmse <- sqrt(mean((predicted_xwoba - woba_test)^2))
  
  pred_class <- apply(test_probs, 1, which.max) - 1
  class_accuracy <- mean(pred_class == y_test)
  
  t_test_result <- t.test(predicted_xwoba, woba_test, paired = TRUE)
  
  brier_scores <- numeric(5)
  for(i in 1:5) {
    actual_binary <- as.numeric(y_test == (i-1))
    predicted_prob <- test_probs[, i]
    brier_scores[i] <- mean((predicted_prob - actual_binary)^2)
  }
  overall_brier <- mean(brier_scores)
  
  cat("\nModel Results:\n")
  cat("Correlation:", round(correlation, 4), "\n")
  cat("MAE:", round(mae, 4), "\n")
  cat("RMSE:", round(rmse, 4), "\n")
  cat("Classification Accuracy:", round(class_accuracy, 4), "\n")
  cat("t-test p-value:", round(t_test_result$p.value, 6), "\n")
  cat("Brier Score:", round(overall_brier, 4), "\n")
  
  if(t_test_result$p.value > 0.05) {
    cat("Well-calibrated probabilities maintained\n")
  } else {
    cat("Some calibration trade-off for correlation\n")
  }
  
  importance <- xgb.importance(model = model)
  cat("\nTop 25 Most Important Features:\n")
  print(head(importance, 25))
  
  return(list(
    model = model,
    correlation = correlation,
    mae = mae,
    rmse = rmse,
    class_accuracy = class_accuracy,
    t_test_p = t_test_result$p.value,
    brier_score = overall_brier,
    predictions = predicted_xwoba,
    probabilities = test_probs,
    actual = woba_test,
    importance = importance,
    feature_count = ncol(X_train)
  ))
}

# Full xwOBA Calculation Function
calculate_full_xwoba <- function(raw_data, model_results) {
  
  all_pa <- raw_data %>% filter(!is.na(Batter))
  
  all_pa$outcome <- case_when(
    all_pa$PlayResult %in% c("Single", "Double", "Triple", "HomeRun") ~ "hit",
    all_pa$PlayResult %in% c("Out", "FieldersChoice", "Error") ~ "out",
    all_pa$PlayResult %in% c("Sacrifice") ~ "sacrifice_fly",
    all_pa$KorBB == "Walk" ~ "walk",
    all_pa$KorBB == "IntentionalWalk" ~ "intentional_walk",
    all_pa$PitchCall == "HitByPitch" ~ "hit_by_pitch",
    all_pa$KorBB %in% c("Strikeout", "StrikeoutLooking", "StrikeoutSwinging") ~ "strikeout",
    TRUE ~ "other"
  )
  
  classified_pa <- all_pa[all_pa$outcome != "other", ]
  
  hits <- sum(classified_pa$outcome == "hit")
  outs <- sum(classified_pa$outcome == "out")
  strikeouts <- sum(classified_pa$outcome == "strikeout")
  BB <- sum(classified_pa$outcome == "walk")
  IBB <- sum(classified_pa$outcome == "intentional_walk")
  SF <- sum(classified_pa$outcome == "sacrifice_fly")
  HBP <- sum(classified_pa$outcome == "hit_by_pitch")
  
  batted_balls <- hits + outs
  AB <- hits + outs + strikeouts
  denominator <- AB + BB - IBB + SF + HBP
  
  mean_xwoba_con <- mean(model_results$predictions, na.rm = TRUE)
  
  wBB_HBP <- 0.690
  
  numerator <- (mean_xwoba_con * batted_balls) + (wBB_HBP * (BB - IBB + HBP))
  full_xwoba <- numerator / denominator
  
  cat("Full xwOBA calculation:\n")
  cat("Batted balls:", batted_balls, "\n")
  cat("Walks (BB):", BB, "\n")
  cat("HBP:", HBP, "\n")
  cat("Mean xwOBA (contact):", round(mean_xwoba_con, 3), "\n")
  cat("Full xwOBA:", round(full_xwoba, 3), "\n")
  
  return(full_xwoba)
}

# Run the complete model
ultimate_results <- train_maximum_correlation_xwoba(raw_data)
full_xwoba_result <- calculate_full_xwoba(raw_data, ultimate_results)

# Get key results
mean_xwobacon <- mean(ultimate_results$predictions, na.rm = TRUE)
correlation <- ultimate_results$correlation

cat("\nFinal Results:\n")
cat("Mean xwOBAcon:", round(mean_xwobacon, 3), "\n")
cat("Full xwOBA:", round(full_xwoba_result, 3), "\n") 
cat("Correlation:", round(correlation, 4), "\n")
