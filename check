
# Load required libraries
library(caret)
library(xgboost)
library(dplyr)
library(googledrive)
library(readr)

# Set up Google Drive authentication (using your existing setup)
options(gargle_oauth_cache = ".secrets")
drive_auth(cache = ".secrets", email = TRUE)

# Use your existing combine_navs_csvs function to get all data from Google Drive
cat("GETTING ALL DATA FROM GOOGLE DRIVE NAVS CSVs FOLDER\n")
cat("==================================================\n")

# Get all CSV data from your Google Drive Navs CSVs folder
combined_navs_data <- combine_navs_csvs("Navs CSVs", use_google_drive = TRUE)

if(is.null(combined_navs_data)) {
  cat("Failed to get data from Google Drive\n")
} else {
  cat("Successfully loaded", nrow(combined_navs_data), "rows from Google Drive\n")
  
  # Clean and standardize the data using your function
  cleaned_data <- clean_and_standardize_data(combined_navs_data)
  
  if(!is.null(cleaned_data)) {
    cat("Data cleaned:", nrow(cleaned_data), "rows\n")
    
    # Update the global raw_data with the Google Drive data
    raw_data <<- cleaned_data
    
    # Now run the complete xwOBA analysis
    cat("\nRUNNING COMPLETE xwOBA ANALYSIS WITH GOOGLE DRIVE DATA\n")
    cat("=====================================================\n")
    
    # Train the model
    ultimate_results <- train_maximum_correlation_xwoba(cleaned_data)
    
    # Calculate full xwOBA
    full_xwoba_result <- calculate_full_xwoba(cleaned_data, ultimate_results)
    
    # Calculate player and team stats
    player_team_results <- calculate_player_team_xwoba_inclusive(cleaned_data, ultimate_results)
    
    # Show results
    cat("\nGOOGLE DRIVE DATA ANALYSIS RESULTS:\n")
    cat("==================================\n")
    cat("Total rows from Google Drive:", nrow(cleaned_data), "\n")
    cat("Model correlation:", round(ultimate_results$correlation, 4), "\n")
    cat("Mean xwOBAcon:", round(mean(ultimate_results$predictions), 3), "\n")
    cat("Full xwOBA:", round(full_xwoba_result, 3), "\n")
    cat("Total PAs analyzed:", player_team_results$total_pa_captured, "\n")
    
    # Check what years we have
    if("Date" %in% colnames(cleaned_data)) {
      dates <- as.Date(cleaned_data$Date)
      valid_dates <- dates[!is.na(dates)]
      if(length(valid_dates) > 0) {
        date_range <- range(valid_dates)
        cat("Date range:", as.character(date_range[1]), "to", as.character(date_range[2]), "\n")
        
        # Show 2025 data specifically
        dates_2025 <- valid_dates[valid_dates >= as.Date("2025-01-01")]
        if(length(dates_2025) > 0) {
          cat("2025 data points:", length(dates_2025), "\n")
        }
      }
    }
    
    # Show 2025 team results if available
    if(2025 %in% player_team_results$teams_by_year$Year) {
      cat("\n2025 TEAM RESULTS (Google Drive Data):\n")
      teams_2025 <- player_team_results$teams_by_year %>%
        filter(Year == 2025) %>%
        select(BatterTeam, PA, Hits, Walks, Strikeouts, actual_wOBA, TrackMan_coverage) %>%
        arrange(desc(PA))
      print(teams_2025)
      
      cat("\nTop 2025 Players by PA:\n")
      players_2025 <- player_team_results$players_by_year %>%
        filter(Year == 2025) %>%
        select(Batter, BatterTeam, PA, Hits, actual_wOBA) %>%
        arrange(desc(PA)) %>%
        head(15)
      print(players_2025)
    }
    
    # Save results
    write.csv(player_team_results$players_by_year, "players_google_drive_complete.csv", row.names = FALSE)
    write.csv(player_team_results$teams_by_year, "teams_google_drive_complete.csv", row.names = FALSE)
    
    # Save the combined dataset for future use
    saveRDS(cleaned_data, "navs_all_data_updated.rds")
    
    cat("\n‚úÖ COMPLETE ANALYSIS FINISHED!\n")
    cat("üìÅ Results saved to:\n")
    cat("   - players_google_drive_complete.csv\n")
    cat("   - teams_google_drive_complete.csv\n")
    cat("   - navs_all_data_updated.rds\n")
    cat("üéØ Model correlation:", round(ultimate_results$correlation, 4), "\n")
    cat("üìä Total CSV files processed from Google Drive:", length(unique(cleaned_data$source_file)), "\n")
    
  } else {
    cat("Data cleaning failed\n")
  }
}
 
