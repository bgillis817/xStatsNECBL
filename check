
# Create new navs_all_data.rds from all current CSVs in Navs CSVs folder
create_updated_navs_data <- function(folder_path = "Navs CSVs") {
  
  cat("CREATING UPDATED navs_all_data.rds FROM ALL CURRENT CSVs\n")
  cat("======================================================\n")
  
  # Check if folder exists
  if(!dir.exists(folder_path)) {
    cat("Folder", folder_path, "not found. Trying current directory...\n")
    folder_path <- "."
  }
  
  # Find all CSV files
  csv_files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)
  
  cat("Found", length(csv_files), "CSV files in", folder_path, "\n")
  
  if(length(csv_files) == 0) {
    cat("No CSV files found!\n")
    return(NULL)
  }
  
  # Show all files that will be included
  cat("\nFiles to be included:\n")
  for(i in 1:length(csv_files)) {
    cat(i, ":", basename(csv_files[i]), "\n")
  }
  
  # Read and combine all CSV files
  all_data_list <- list()
  file_summary <- data.frame()
  
  for(i in 1:length(csv_files)) {
    file <- csv_files[i]
    filename <- basename(file)
    
    tryCatch({
      cat("\nProcessing:", filename, "...")
      
      # Read CSV
      data <- read.csv(file, stringsAsFactors = FALSE)
      
      # Add source tracking
      data$source_file <- filename
      data$file_number <- i
      
      # Check data quality
      total_rows <- nrow(data)
      has_batter <- sum(!is.na(data$Batter) & data$Batter != "")
      has_play_result <- sum(!is.na(data$PlayResult) & data$PlayResult != "")
      
      cat(" ", total_rows, "rows,", has_batter, "with batter,", has_play_result, "with PlayResult")
      
      # Check date range
      date_info <- "No dates"
      if("Date" %in% colnames(data) && any(!is.na(data$Date))) {
        dates <- as.Date(data$Date)
        valid_dates <- dates[!is.na(dates)]
        if(length(valid_dates) > 0) {
          date_range <- range(valid_dates)
          date_info <- paste(as.character(date_range[1]), "to", as.character(date_range[2]))
          cat(" (", date_info, ")")
        }
      }
      
      # Include if it has baseball data
      if(total_rows > 0 && has_batter > 0) {
        all_data_list[[length(all_data_list) + 1]] <- data
        
        # Track summary
        file_summary <- rbind(file_summary, data.frame(
          file = filename,
          rows = total_rows,
          batters = has_batter,
          play_results = has_play_result,
          dates = date_info,
          stringsAsFactors = FALSE
        ))
        
        cat(" -> INCLUDED")
      } else {
        cat(" -> SKIPPED")
      }
      
    }, error = function(e) {
      cat(" ERROR:", e$message)
    })
  }
  
  cat("\n\nFILE SUMMARY:\n")
  print(file_summary)
  
  if(length(all_data_list) == 0) {
    cat("No valid data files found!\n")
    return(NULL)
  }
  
  cat("\nCombining", length(all_data_list), "files...\n")
  
  # Get all unique column names
  all_columns <- unique(unlist(lapply(all_data_list, colnames)))
  cat("Total unique columns:", length(all_columns), "\n")
  
  # Standardize all datasets to have same columns
  standardized_data <- lapply(all_data_list, function(df) {
    missing_cols <- setdiff(all_columns, colnames(df))
    for(col in missing_cols) {
      df[[col]] <- NA
    }
    return(df[, all_columns])
  })
  
  # Combine all data
  combined_data <- do.call(rbind, standardized_data)
  
  cat("Combined dataset:", nrow(combined_data), "rows\n")
  
  # Final data summary
  cat("\nFINAL DATASET SUMMARY:\n")
  cat("Total rows:", nrow(combined_data), "\n")
  cat("Total columns:", ncol(combined_data), "\n")
  
  # Date coverage
  if("Date" %in% colnames(combined_data)) {
    dates <- as.Date(combined_data$Date)
    valid_dates <- dates[!is.na(dates)]
    if(length(valid_dates) > 0) {
      cat("Date range:", as.character(range(valid_dates)), "\n")
      
      # Show 2025 coverage
      dates_2025 <- valid_dates[valid_dates >= as.Date("2025-01-01")]
      if(length(dates_2025) > 0) {
        cat("2025 data:", length(dates_2025), "rows\n")
        
        # Monthly breakdown for 2025
        monthly_2025 <- table(format(dates_2025, "%Y-%m"))
        cat("2025 by month:\n")
        print(monthly_2025)
      }
    }
  }
  
  # Team coverage
  if("BatterTeam" %in% colnames(combined_data)) {
    cat("\nTeam coverage:\n")
    team_counts <- table(combined_data$BatterTeam, useNA = "always")
    print(team_counts)
  }
  
  # Save the new file
  cat("\nSaving updated navs_all_data.rds...\n")
  saveRDS(combined_data, "navs_all_data.rds")
  cat("✅ navs_all_data.rds updated successfully!\n")
  
  return(combined_data)
}

# Create the updated dataset
cat("STEP 1: Creating updated navs_all_data.rds from all current CSVs\n")
updated_navs_data <- create_updated_navs_data("Navs CSVs")

if(is.null(updated_navs_data)) {
  cat("Failed to create updated dataset. Using existing raw_data.\n")
  updated_navs_data <- raw_data
}

# Now use this updated dataset for the complete analysis
cat("\nSTEP 2: Running complete xwOBA system with updated dataset\n")

# Replace raw_data with the updated version
raw_data <- updated_navs_data

# Run the complete system
complete_system_updated <- complete_xwoba_system(updated_navs_data)

# Show the improvement
cat("\nUPDATED SYSTEM RESULTS:\n")
cat("======================\n")
cat("Total PAs in updated dataset:", complete_system_updated$summary$total_pas, "\n")
cat("TrackMan coverage:", complete_system_updated$summary$trackman_coverage, "%\n")
cat("Model correlation:", round(complete_system_updated$model_results$correlation, 4), "\n")

# Show 2025 results with updated data
if(2025 %in% complete_system_updated$teams_by_year$Year) {
  cat("\n2025 TEAM RESULTS (Updated Dataset):\n")
  teams_2025_updated <- complete_system_updated$teams_by_year %>%
    filter(Year == 2025) %>%
    select(BatterTeam, PA, Hits, Walks, Strikeouts, actual_wOBA, TrackMan_coverage) %>%
    arrange(desc(PA))
  print(teams_2025_updated)
  
  cat("\nTop 2025 players by PA (Updated Dataset):\n")
  players_2025_updated <- complete_system_updated$players_by_year %>%
    filter(Year == 2025) %>%
    select(Batter, BatterTeam, PA, Hits, actual_wOBA) %>%
    arrange(desc(PA)) %>%
    head(15)
  print(players_2025_updated)
}

# Save updated results
write.csv(complete_system_updated$players_by_year, "players_updated_dataset.csv", row.names = FALSE)
write.csv(complete_system_updated$teams_by_year, "teams_updated_dataset.csv", row.names = FALSE)

cat("\n✅ COMPLETE! Updated navs_all_data.rds created and analysis run\n")
cat("📁 Results saved to players_updated_dataset.csv and teams_updated_dataset.csv\n")
cat("🎯 Model correlation:", round(complete_system_updated$model_results$correlation, 4), "\n")
cat("📊 Mean xwOBAcon:", round(mean(complete_system_updated$model_results$predictions), 3), "\n")

# Quick verification
cat("\nQUICK VERIFICATION:\n")
cat("Files used:", length(unique(updated_navs_data$source_file)), "\n")
cat("Date range:", as.character(range(as.Date(updated_navs_data$Date), na.rm = TRUE)), "\n")
cat("Total rows in new navs_all_data.rds:", nrow(updated_navs_data), "\n")
