
# Read all CSV files from the Navs CSVs folder
read_navs_csv_folder <- function(folder_path = "Navs CSVs") {
  
  cat("READING ALL FILES FROM NAVS CSVs FOLDER\n")
  cat("======================================\n")
  
  # Check if folder exists
  if(!dir.exists(folder_path)) {
    cat("Folder", folder_path, "not found. Trying current directory...\n")
    folder_path <- "."
  }
  
  # Find all CSV files in the folder
  csv_files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)
  
  cat("Found", length(csv_files), "CSV files in", folder_path, "\n")
  
  if(length(csv_files) == 0) {
    cat("No CSV files found. Available files:\n")
    print(list.files(folder_path))
    return(raw_data)
  }
  
  # Show all files found
  cat("CSV files found:\n")
  for(i in 1:length(csv_files)) {
    cat(i, ":", basename(csv_files[i]), "\n")
  }
  
  # Read each CSV file
  all_data_list <- list()
  total_rows <- 0
  
  for(i in 1:length(csv_files)) {
    file <- csv_files[i]
    cat("\nReading:", basename(file), "...")
    
    tryCatch({
      # Read CSV
      data <- read.csv(file, stringsAsFactors = FALSE)
      
      # Check if it contains baseball data
      if("Batter" %in% colnames(data) && nrow(data) > 0) {
        
        # Add source file info
        data$source_file <- basename(file)
        
        # Check date range if Date column exists
        if("Date" %in% colnames(data)) {
          dates <- as.Date(data$Date)
          if(any(!is.na(dates))) {
            date_range <- range(dates, na.rm = TRUE)
            cat("\n  ", nrow(data), "rows, dates:", as.character(date_range[1]), "to", as.character(date_range[2]))
          } else {
            cat("\n  ", nrow(data), "rows, no valid dates")
          }
        } else {
          cat("\n  ", nrow(data), "rows, no Date column")
        }
        
        all_data_list[[length(all_data_list) + 1]] <- data
        total_rows <- total_rows + nrow(data)
        
      } else {
        cat("\n  Skipped - no Batter column or empty")
      }
      
    }, error = function(e) {
      cat("\n  Error:", e$message)
    })
  }
  
  if(length(all_data_list) == 0) {
    cat("\nNo valid baseball data files found\n")
    return(raw_data)
  }
  
  cat("\n\nCombining", length(all_data_list), "files with", total_rows, "total rows...\n")
  
  # Get all unique column names across all files
  all_columns <- unique(unlist(lapply(all_data_list, colnames)))
  cat("Total unique columns across all files:", length(all_columns), "\n")
  
  # Standardize each dataset to have the same columns
  standardized_data <- lapply(all_data_list, function(df) {
    missing_cols <- setdiff(all_columns, colnames(df))
    for(col in missing_cols) {
      df[[col]] <- NA
    }
    return(df[, all_columns])
  })
  
  # Combine all datasets
  combined_data <- do.call(rbind, standardized_data)
  
  cat("Combined dataset:", nrow(combined_data), "rows\n")
  
  # Remove duplicates if key columns exist
  key_columns <- c("Batter", "Date", "Inning", "PlayResult", "ExitSpeed", "Angle")
  available_keys <- intersect(key_columns, colnames(combined_data))
  
  if(length(available_keys) >= 3) {
    cat("Removing duplicates based on:", paste(available_keys, collapse = ", "), "\n")
    before_dedup <- nrow(combined_data)
    
    combined_data <- combined_data %>%
      distinct(across(all_of(available_keys)), .keep_all = TRUE)
    
    after_dedup <- nrow(combined_data)
    cat("Removed", before_dedup - after_dedup, "duplicate rows\n")
  }
  
  # Final summary
  cat("\nFINAL DATASET SUMMARY:\n")
  cat("Total rows:", nrow(combined_data), "\n")
  cat("Total columns:", ncol(combined_data), "\n")
  
  # Check date coverage
  if("Date" %in% colnames(combined_data)) {
    dates <- as.Date(combined_data$Date)
    valid_dates <- dates[!is.na(dates)]
    
    if(length(valid_dates) > 0) {
      date_range <- range(valid_dates)
      cat("Date range:", as.character(date_range[1]), "to", as.character(date_range[2]), "\n")
      
      # Check for recent data
      june_15_2025 <- as.Date("2025-06-15")
      recent_data <- sum(valid_dates >= june_15_2025)
      cat("Rows since June 15, 2025:", recent_data, "\n")
      
      # Show monthly breakdown for 2025
      if(any(valid_dates >= as.Date("2025-01-01"))) {
        cat("\n2025 data by month:\n")
        data_2025 <- combined_data[valid_dates >= as.Date("2025-01-01"), ]
        dates_2025 <- as.Date(data_2025$Date)
        monthly_counts <- table(format(dates_2025, "%Y-%m"))
        print(monthly_counts)
      }
    }
  }
  
  # Check team coverage
  if("BatterTeam" %in% colnames(combined_data)) {
    cat("\nTeams in dataset:\n")
    team_counts <- table(combined_data$BatterTeam)
    print(team_counts)
  }
  
  return(combined_data)
}

# Read the complete dataset from Navs CSVs folder
cat("Loading complete dataset from Navs CSVs folder...\n")
complete_navs_data <- read_navs_csv_folder("Navs CSVs")

# Compare with original
cat("\nDATASET COMPARISON:\n")
cat("Original raw_data rows:", nrow(raw_data), "\n")
cat("Complete Navs data rows:", nrow(complete_navs_data), "\n")
cat("Additional rows found:", nrow(complete_navs_data) - nrow(raw_data), "\n")

# Now run the complete analysis with ALL the data
cat("\nRunning complete analysis with all Navs CSV data...\n")
complete_system_all_data <- complete_xwoba_system(complete_navs_data)

# Show improved results
cat("\nIMPROVED RESULTS:\n")
cat("=================\n")

if(2025 %in% complete_system_all_data$teams_by_year$Year) {
  cat("2025 TEAM RESULTS (Complete Dataset):\n")
  teams_2025_all <- complete_system_all_data$teams_by_year %>%
    filter(Year == 2025) %>%
    select(BatterTeam, PA, Hits, Walks, Strikeouts, actual_wOBA, TrackMan_coverage) %>%
    arrange(desc(PA))
  print(teams_2025_all)
  
  cat("\nTop 2025 players by PA:\n")
  players_2025_all <- complete_system_all_data$players_by_year %>%
    filter(Year == 2025) %>%
    select(Batter, BatterTeam, PA, Hits, actual_wOBA) %>%
    arrange(desc(PA)) %>%
    head(15)
  print(players_2025_all)
}

# Save the complete results
write.csv(complete_system_all_data$players_by_year, "complete_players_all_navs_data.csv", row.names = FALSE)
write.csv(complete_system_all_data$teams_by_year, "complete_teams_all_navs_data.csv", row.names = FALSE)

cat("\nComplete results saved with ALL Navs CSV data included\n")
cat("Now you should see full PA counts for all teams!\n")
```

This will:

1. **Read ALL CSV files** from the “Navs CSVs” folder
1. **Show each file** as it processes it with row counts and date ranges
1. **Combine everything** into one complete dataset
1. **Remove duplicates** intelligently
1. **Show monthly breakdown** of 2025 data
1. **Display team PA counts** so you can see the full numbers

Now you should get ALL your plate appearances, not just the subset that was in the original raw_data file!​​​​​​​​​​​​​​​​