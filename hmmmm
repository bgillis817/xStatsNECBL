# Expected Stats Dashboard
library(shiny)
library(ggplot2)
library(DT)
library(dplyr)
library(tidyr)
library(rvest)
library(httr)
library(stringr)
library(xml2)

# NECBL URLs by season - CORRECTED SEASON IDs
necbl_urls_by_season <- list(
  "2024" = list(
    "Bristol Blues" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?leagueid=204&seasonid=33860&teamid=89490",
    "Danbury Westerners" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6402&seasonid=33860",
    "Keene SwampBats" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6401&seasonid=33860",
    "Martha's Vineyard Sharks" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=142675&seasonid=33860",
    "Mystic Schooners" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=11912&seasonid=33860",
    "Newport Gulls" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6458&seasonid=33860",
    "North Adams Steeplecats" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6404&seasonid=33860",
    "North Shore Navigators" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=154432&seasonid=33860",
    "Ocean State Waves" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=51489&seasonid=33860",
    "Sanford Mainers" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6459&seasonid=33860",
    "Upper Valley Nighthawks" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=104040&seasonid=33860",
    "Valley Blue Sox" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6403&seasonid=33860",
    "Vermont Mountaineers" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6405&seasonid=33860"
  ),
  "2023" = list(
    "Bristol Blues" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?leagueid=204&seasonid=33589&teamid=89490",
    "Danbury Westerners" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6402&seasonid=33589",
    "Keene SwampBats" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6401&seasonid=33589",
    "Martha's Vineyard Sharks" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=142675&seasonid=33589",
    "Mystic Schooners" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=11912&seasonid=33589",
    "Newport Gulls" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6458&seasonid=33589",
    "North Adams Steeplecats" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6404&seasonid=33589",
    "North Shore Navigators" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=154432&seasonid=33589",
    "Ocean State Waves" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=51489&seasonid=33589",
    "Sanford Mainers" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6459&seasonid=33589",
    "Upper Valley Nighthawks" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=104040&seasonid=33589",
    "Valley Blue Sox" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6403&seasonid=33589",
    "Vermont Mountaineers" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6405&seasonid=33589"
  ),
  "2022" = list(
    "Bristol Blues" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?leagueid=204&seasonid=33205&teamid=89490",
    "Danbury Westerners" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6402&seasonid=33205",
    "Keene SwampBats" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6401&seasonid=33205",
    "Martha's Vineyard Sharks" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=142675&seasonid=33205",
    "Mystic Schooners" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=11912&seasonid=33205",
    "Newport Gulls" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6458&seasonid=33205",
    "North Adams Steeplecats" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6404&seasonid=33205",
    "North Shore Navigators" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=154432&seasonid=33205",
    "Ocean State Waves" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=51489&seasonid=33205",
    "Sanford Mainers" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6459&seasonid=33205",
    "Upper Valley Nighthawks" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=104040&seasonid=33205",
    "Valley Blue Sox" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6403&seasonid=33205",
    "Vermont Mountaineers" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6405&seasonid=33205"
  ),
  "2021" = list(
    "Bristol Blues" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?leagueid=204&seasonid=32746&teamid=89490",
    "Danbury Westerners" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6402&seasonid=32746",
    "Keene SwampBats" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6401&seasonid=32746",
    "Martha's Vineyard Sharks" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=142675&seasonid=32746",
    "Mystic Schooners" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=11912&seasonid=32746",
    "Newport Gulls" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6458&seasonid=32746",
    "North Adams Steeplecats" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6404&seasonid=32746",
    "North Shore Navigators" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=154432&seasonid=32746",
    "Ocean State Waves" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=51489&seasonid=32746",
    "Sanford Mainers" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6459&seasonid=32746",
    "Upper Valley Nighthawks" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=104040&seasonid=32746",
    "Valley Blue Sox" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6403&seasonid=32746",
    "Vermont Mountaineers" = "http://necbl.wttbaseball.pointstreak.com/team_stats.html?teamid=6405&seasonid=32746"
  )
)

# NECBL scraping function
get_necbl_woba_by_season <- function(season = "2024") {
  cat("Scraping NECBL", season, "season for wOBA values...\n")
  
  necbl_urls <- necbl_urls_by_season[[season]]
  if (is.null(necbl_urls)) {
    cat("Season", season, "not available\n")
    return(data.frame())
  }
  
  all_woba <- data.frame()
  
  for (i in seq_along(necbl_urls)) {
    team_name <- names(necbl_urls)[i]
    url <- necbl_urls[[i]]
    
    cat("Scraping", team_name, "for", season, "season...\n")
    
    tryCatch({
      response <- GET(url, user_agent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"))
      page <- read_html(response)
      tables <- html_table(page, fill = TRUE)
      
      for (table in tables) {
        if (ncol(table) >= 10 && nrow(table) > 2) {
          if (grepl("Player|AB|H", paste(names(table), collapse = " "), ignore.case = TRUE)) {
            
            simple_stats <- data.frame(
              Player = as.character(table[[1]]),
              AB = as.numeric(as.character(table[[5]])),
              H = as.numeric(as.character(table[[7]])),
              X2B = as.numeric(as.character(table[[8]])),
              X3B = as.numeric(as.character(table[[9]])),
              HR = as.numeric(as.character(table[[10]])),
              BB = as.numeric(as.character(table[[12]])),
              HBP = ifelse(ncol(table) >= 13, as.numeric(as.character(table[[13]])), 0),
              SF = ifelse(ncol(table) >= 15, as.numeric(as.character(table[[15]])), 0),
              stringsAsFactors = FALSE
            ) %>%
            filter(!grepl("Player|Total|AVG|---", Player, ignore.case = TRUE),
                   !is.na(AB), AB > 0, !is.na(H)) %>%
            mutate(
              X2B = ifelse(is.na(X2B), 0, X2B),
              X3B = ifelse(is.na(X3B), 0, X3B),
              HR = ifelse(is.na(HR), 0, HR),
              BB = ifelse(is.na(BB), 0, BB),
              HBP = ifelse(is.na(HBP), 0, HBP),
              SF = ifelse(is.na(SF), 0, SF),
              X1B = pmax(0, H - X2B - X3B - HR),
              PA = AB + BB + HBP + SF,
              wOBA = round((X1B * 0.888 + X2B * 1.271 + X3B * 1.616 + HR * 2.101 + (BB + HBP) * 0.690) / pmax(PA, 1), 3),
              wOBACON = round((X1B * 0.888 + X2B * 1.271 + X3B * 1.616 + HR * 2.101) / pmax(AB, 1), 3),
              Last_Name = toupper(trimws(sub(",.*", "", Player))),
              First_Initial = toupper(substr(trimws(sub(".*,\\s*", "", Player)), 1, 1)),
              Season = season,
              Team = team_name
            ) %>%
            filter(PA > 0) %>%
            select(Player, Last_Name, First_Initial, wOBA, wOBACON, Season, Team)
            
            all_woba <- rbind(all_woba, simple_stats)
            cat("  Found", nrow(simple_stats), "players\n")
            break
          }
        }
      }
    }, error = function(e) cat("  Error:", e$message, "\n"))
    
    Sys.sleep(1)
  }
  
  cat("Total players with wOBA for", season, ":", nrow(all_woba), "\n")
  return(all_woba)
}

# Matching function
match_necbl_data <- function(model_data, necbl_data) {
  cat("Matching NECBL data with model data...\n")
  
  model_with_names <- model_data %>%
    mutate(
      Last_Name = toupper(trimws(sub(",.*", "", Batter))),
      First_Initial = toupper(substr(trimws(sub(".*,\\s*", "", Batter)), 1, 1))
    )
  
  matched_data <- model_with_names %>%
    left_join(necbl_data %>% select(Last_Name, First_Initial, wOBA, wOBACON, Team), 
              by = c("Last_Name", "First_Initial")) %>%
    mutate(
      actual_woba_final = ifelse(!is.na(wOBA), wOBA, actual_woba),
      actual_wobacon_final = ifelse(!is.na(wOBACON), wOBACON, actual_woba),  # Use model wOBA as fallback for wOBACON
      data_source = ifelse(!is.na(wOBA), "NECBL", "Model"),
      necbl_team = Team
    ) %>%
    select(-Last_Name, -First_Initial, -wOBA, -wOBACON, -Team) %>%
    rename(NECBL_Team = necbl_team)
  
  necbl_matches <- sum(!is.na(matched_data$actual_woba_final) & matched_data$data_source == "NECBL")
  total_players <- length(unique(matched_data$Batter))
  
  cat("- Total unique players:", total_players, "\n")
  cat("- Players matched with NECBL:", necbl_matches, "\n")
  cat("- Match rate:", round(necbl_matches / total_players * 100, 1), "%\n")
  
  return(matched_data)
}

# Initialize data safely
initialize_app_data <- function() {
  if (exists("combined_df") && is.data.frame(combined_df) && nrow(combined_df) > 0) {
    return(combined_df)
  }
  
  if (exists("raw_data") && is.data.frame(raw_data) && nrow(raw_data) > 0) {
    combined_df <- raw_data %>%
      filter(
        PlayResult %in% c("Single", "Double", "Triple", "HomeRun", "Out", 
                          "FieldersChoice", "Error", "Sacrifice"),
        !is.na(ExitSpeed), ExitSpeed > 0, !is.na(Angle), !is.na(Batter)
      ) %>%
      mutate(
        outcome_clean = case_when(
          PlayResult == "Single" ~ "single",
          PlayResult == "Double" ~ "double",
          PlayResult == "Triple" ~ "triple",
          PlayResult == "HomeRun" ~ "home_run",
          TRUE ~ "out"
        ),
        actual_woba = case_when(
          outcome_clean == "single" ~ 0.888,
          outcome_clean == "double" ~ 1.271,
          outcome_clean == "triple" ~ 1.616,
          outcome_clean == "home_run" ~ 2.101,
          TRUE ~ 0.000
        ),
        predicted_xwoba = if(exists("ultimate_results")) {
          rep(ultimate_results$predictions, length.out = n())
        } else {
          pmin(2.5, pmax(0, 0.1 + (ExitSpeed - 60) * 0.01 + pmax(0, 30 - abs(Angle - 20)) * 0.005))
        }
      ) %>%
      filter(!is.na(actual_woba), !is.na(predicted_xwoba))
    
    return(combined_df)
  }
  
  # Sample data fallback
  set.seed(42)
  n <- 1000
  
  combined_df <- data.frame(
    Batter = paste("Player", sample(1:50, n, replace = TRUE)),
    ExitSpeed = rnorm(n, 85, 15),
    Angle = rnorm(n, 15, 20),
    PlayResult = sample(c("Single", "Double", "Triple", "HomeRun", "Out"), n, 
                       replace = TRUE, prob = c(0.15, 0.08, 0.02, 0.05, 0.70)),
    Date = Sys.Date() - sample(1:90, n, replace = TRUE),
    BatterTeam = sample(c("Team A", "Team B", "Team C"), n, replace = TRUE),
    stringsAsFactors = FALSE
  ) %>%
    mutate(
      outcome_clean = case_when(
        PlayResult == "Single" ~ "single",
        PlayResult == "Double" ~ "double", 
        PlayResult == "Triple" ~ "triple",
        PlayResult == "HomeRun" ~ "home_run",
        TRUE ~ "out"
      ),
      actual_woba = case_when(
        outcome_clean == "single" ~ 0.888,
        outcome_clean == "double" ~ 1.271,
        outcome_clean == "triple" ~ 1.616,
        outcome_clean == "home_run" ~ 2.101,
        TRUE ~ 0.000
      ),
      predicted_xwoba = pmin(2.5, pmax(0, 
        0.1 + (ExitSpeed - 60) * 0.01 + 
        pmax(0, 30 - abs(Angle - 20)) * 0.005 +
        rnorm(n(), 0, 0.05)
      ))
    )
  
  return(combined_df)
}

# Initialize data
app_combined_df <- initialize_app_data()

# Define UI
ui <- fluidPage(
  tags$head(
    tags$style(HTML("
      .header-container {
        display: flex;
        align-items: center;
        padding: 15px 20px 10px 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        margin-bottom: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }
      .header-container h1 {
        font-family: 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;
        font-weight: 700;
        color: white;
        letter-spacing: 1px;
        font-size: 32px;
        margin: 0;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
      }
      .necbl-status {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
      }
      .action-button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
      }
    "))
  ),
  
  div(class = "content-wrapper",
    div(class = "header-container",
        h1("Expected Stats Dashboard")
    ),

    # Controls
    fluidRow(
      column(12,
        div(class = "necbl-status",
          h4("Data Controls", style = "margin: 0 0 10px 0;"),
          fluidRow(
            column(3, selectInput("necbl_season", "NECBL Season:", 
                         choices = c("2024", "2023", "2022", "2021"), selected = "2024")),
            column(3, selectInput("team_filter", "Filter by Team:", 
                         choices = c("All Teams" = "All"), selected = "All")),
            column(3, selectInput("pa_threshold", "Minimum PAs:", 
                         choices = c("All Players" = 0, "5+" = 5, "10+" = 10, "15+" = 15, "20+" = 20, "25+" = 25, "30+" = 30),
                         selected = 10)),
            column(3, selectInput("metric_type", "Primary Metric:", 
                         choices = c("xwOBA" = "xwoba", "xwOBACON" = "xwobacon"), selected = "xwoba"))
          ),
          br(),
          actionButton("refresh_necbl", "Refresh NECBL Data", class = "action-button")
        )
      )
    ),

    # Main content
    sidebarLayout(
      sidebarPanel(
        conditionalPanel(
          condition = "input.tabs == 'Performance Analysis'",
          selectInput("scatter_player", "Select Player:", 
                      choices = c("All Players" = ""), selected = "")
        ),
        
        conditionalPanel(
          condition = "input.tabs == 'Player Comparison'",
          selectInput("comp_player1", "Select Player 1:", choices = c("Choose Player" = "")),
          selectInput("comp_player2", "Select Player 2:", choices = c("Choose Player" = "")),
          dateRangeInput("comp_date_range", "Date Range:", 
                        start = Sys.Date() - 90, end = Sys.Date())
        ),
        
        conditionalPanel(
          condition = "input.tabs == 'Team & Player Browser'",
          selectInput("browser_team", "Select Team:", choices = c("All Teams" = "All")),
          selectInput("browser_player", "Select Player:", choices = c("All Players" = "All")),
          selectInput("browser_sort", "Sort by:", 
                     choices = c("xwOBA" = "avg_xwoba", "wOBA" = "avg_woba", "PAs" = "pa_count"),
                     selected = "avg_xwoba")
        )
      ),

      mainPanel(
        tabsetPanel(
          id = "tabs",
          
          tabPanel("Performance Analysis", 
                   div(
                     h3("Expected vs Actual Performance Analysis"),
                     plotOutput("performance_plot", height = "500px")
                   )),
          
          tabPanel("Underperformers", 
                   div(
                     h3("Players Getting Unlucky (Expected > Actual)", style = "color: #28a745;"),
                     plotOutput("underperformers_chart", height = "400px"),
                     hr(),
                     DT::dataTableOutput("underperformers")
                   )),
          
          tabPanel("Overperformers", 
                   div(
                     h3("Players Getting Lucky (Actual > Expected)", style = "color: #dc3545;"),
                     plotOutput("overperformers_chart", height = "400px"),
                     hr(),
                     DT::dataTableOutput("overperformers")
                   )),
          
          tabPanel("Player Comparison",
                   div(
                     h3("Player Performance Comparison"),
                     plotOutput("comparison_line_chart", height = "500px"),
                     hr(),
                     DT::dataTableOutput("comparison_summary")
                   )),
          
          tabPanel("Team & Player Browser",
                   div(
                     h3("Team and Player Browser"),
                     DT::dataTableOutput("browser_table")
                   ))
        )
      )
    )
  )
)

# Define server
server <- function(input, output, session) {
  
  # Reactive values
  values <- reactiveValues(
    necbl_data = NULL,
    combined_df_enhanced = app_combined_df,
    last_update = NULL
  )
  
  # Helper function
  get_filtered_data <- function() {
    current_data <- values$combined_df_enhanced
    
    pa_threshold <- as.numeric(input$pa_threshold)
    if (pa_threshold > 0) {
      current_data <- current_data %>%
        group_by(Batter) %>%
        filter(n() >= pa_threshold) %>%
        ungroup()
    }
    
    if (!is.null(input$team_filter) && input$team_filter != "All") {
      if ("BatterTeam" %in% names(current_data)) {
        current_data <- current_data %>%
          filter(BatterTeam == input$team_filter)
      }
    }
    
    return(current_data)
  }
  
  # Update UI elements
  observe({
    current_data <- get_filtered_data()
    
    if (nrow(current_data) > 0) {
      player_choices <- c("All Players" = "", sort(unique(current_data$Batter)))
      
      updateSelectInput(session, "scatter_player", choices = player_choices)
      updateSelectInput(session, "comp_player1", choices = c("Choose Player" = "", sort(unique(current_data$Batter))))
      updateSelectInput(session, "comp_player2", choices = c("Choose Player" = "", sort(unique(current_data$Batter))))
      updateSelectInput(session, "browser_player", choices = c("All Players" = "All", sort(unique(current_data$Batter))))
      
      if ("BatterTeam" %in% names(current_data)) {
        team_choices <- c("All Teams" = "All", sort(unique(current_data$BatterTeam)))
        updateSelectInput(session, "team_filter", choices = team_choices)
        updateSelectInput(session, "browser_team", choices = team_choices)
      }
    }
  })
  
  # NECBL data refresh
  observeEvent(input$refresh_necbl, {
    showModal(modalDialog(
      title = paste("Scraping NECBL", input$necbl_season, "Data"),
      paste("Scraping statistics from NECBL", input$necbl_season, "season..."),
      footer = NULL, easyClose = FALSE
    ))
    
    tryCatch({
      values$necbl_data <- get_necbl_woba_by_season(input$necbl_season)
      values$last_update <- Sys.time()
      
      if (!is.null(values$necbl_data) && nrow(values$necbl_data) > 0) {
        values$combined_df_enhanced <- match_necbl_data(app_combined_df, values$necbl_data)
        removeModal()
        showNotification(paste("NECBL", input$necbl_season, "data updated!"), type = "success")
      } else {
        removeModal()
        showNotification("No NECBL data found.", type = "warning")
      }
    }, error = function(e) {
      removeModal()
      showNotification(paste("Error:", e$message), type = "error")
    })
  })
  
  # Performance Analysis Plot
  output$performance_plot <- renderPlot({
    current_data <- get_filtered_data()
    
    if (!is.null(input$scatter_player) && input$scatter_player != "") {
      current_data <- current_data %>% filter(Batter == input$scatter_player)
      plot_title <- paste("Performance Analysis:", input$scatter_player)
    } else {
      plot_title <- "Performance Analysis: All Players"
    }
    
    # Choose metric based on selection
    if (input$metric_type == "xwoba") {
      y_var <- current_data$predicted_xwoba
      y_actual <- if ("actual_woba_final" %in% names(current_data)) {
        current_data$actual_woba_final
      } else {
        current_data$actual_woba
      }
      x_label <- "Actual wOBA"
      y_label <- "Expected wOBA (xwOBA)"
    } else {
      y_var <- current_data$predicted_xwoba  # Use xwOBA as proxy for xwOBACON
      y_actual <- if ("actual_wobacon_final" %in% names(current_data)) {
        current_data$actual_wobacon_final
      } else {
        current_data$actual_woba  # Fallback
      }
      x_label <- "Actual wOBACON"
      y_label <- "Expected wOBACON (xwOBACON)"
    }
    
    ggplot(current_data, aes(x = y_actual, y = y_var)) +
      geom_point(alpha = 0.6, size = 3, color = "#667eea") +
      geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "#dc3545", size = 1) +
      labs(title = plot_title,
           subtitle = "Red line shows perfect prediction",
           x = x_label, y = y_label) +
      theme_minimal() +
      theme(
        plot.title = element_text(size = 16, face = "bold"),
        plot.subtitle = element_text(size = 12),
        axis.title = element_text(size = 12, face = "bold")
      )
  })
  
  # Underperformers Chart (Getting Unlucky - Green)
  output$underperformers_chart <- renderPlot({
    current_data <- get_filtered_data()
    pa_threshold <- as.numeric(input$pa_threshold)
    min_pa <- max(20, pa_threshold)
    
    underperformers_data <- current_data %>%
      group_by(Batter) %>%
      summarise(
        PA = n(),
        Expected = mean(predicted_xwoba, na.rm = TRUE),
        Actual = mean(if("actual_woba_final" %in% names(current_data)) actual_woba_final else actual_woba, na.rm = TRUE),
        .groups = "drop"
      ) %>%
      mutate(Difference = Expected - Actual) %>%
      filter(PA >= min_pa, Difference > 0.025) %>%
      arrange(desc(Difference)) %>%
      head(10)
    
    if (nrow(underperformers_data) > 0) {
      ggplot(underperformers_data, aes(x = reorder(Batter, Difference), y = Difference)) +
        geom_col(fill = "#28a745", alpha = 0.8) +
        geom_text(aes(label = round(Difference, 3)), hjust = -0.1, size = 3) +
        coord_flip() +
        labs(title = "Top 10 Players Getting Unlucky", 
             subtitle = paste("Minimum", min_pa, "PAs | Expected > Actual"),
             x = "Player", y = "Expected - Actual") +
        theme_minimal() +
        theme(plot.title = element_text(size = 14, face = "bold", color = "#28a745"))
    } else {
      ggplot() + 
        geom_text(aes(x = 0.5, y = 0.5, label = "No underperforming players found"), size = 6) +
        theme_void()
    }
  })
  
  # Overperformers Chart (Getting Lucky - Red)
  output$overperformers_chart <- renderPlot({
    current_data <- get_filtered_data()
    pa_threshold <- as.numeric(input$pa_threshold)
    min_pa <- max(20, pa_threshold)
    
    overperformers_data <- current_data %>%
      group_by(Batter) %>%
      summarise(
        PA = n(),
        Expected = mean(predicted_xwoba, na.rm = TRUE),
        Actual = mean(if("actual_woba_final" %in% names(current_data)) actual_woba_final else actual_woba, na.rm = TRUE),
        .groups = "drop"
      ) %>%
      mutate(Difference = Actual - Expected) %>%
      filter(PA >= min_pa, Difference > 0.025) %>%
      arrange(desc(Difference)) %>%
      head(10)
    
    if (nrow(overperformers_data) > 0) {
      ggplot(overperformers_data, aes(x = reorder(Batter, Difference), y = Difference)) +
        geom_col(fill = "#dc3545", alpha = 0.8) +
        geom_text(aes(label = round(Difference, 3)), hjust = -0.1, size = 3) +
        coord_flip() +
        labs(title = "Top 10 Players Getting Lucky", 
             subtitle = paste("Minimum", min_pa, "PAs | Actual > Expected"),
             x = "Player", y = "Actual - Expected") +
        theme_minimal() +
        theme(plot.title = element_text(size = 14, face = "bold", color = "#dc3545"))
    } else {
      ggplot() + 
        geom_text(aes(x = 0.5, y = 0.5, label = "No overperforming players found"), size = 6) +
        theme_void()
    }
  })
  
  # Player Comparison Line Chart
  output$comparison_line_chart <- renderPlot({
    req(input$comp_player1, input$comp_player2)
    
    current_data <- get_filtered_data()
    
    # Filter by date range if Date column exists
    if ("Date" %in% names(current_data)) {
      current_data <- current_data %>%
        filter(Date >= input$comp_date_range[1], Date <= input$comp_date_range[2])
    }
    
    comparison_data <- current_data %>%
      filter(Batter %in% c(input$comp_player1, input$comp_player2)) %>%
      arrange(if("Date" %in% names(.)) Date else row_number()) %>%
      group_by(Batter) %>%
      mutate(
        PA_Number = row_number(),
        Cumulative_xwOBA = cummean(predicted_xwoba),
        Cumulative_wOBA = cummean(if("actual_woba_final" %in% names(current_data)) actual_woba_final else actual_woba),
        Cumulative_xwOBACON = cummean(predicted_xwoba),  # Use as proxy
        Cumulative_wOBACON = cummean(if("actual_wobacon_final" %in% names(current_data)) actual_wobacon_final else actual_woba)
      ) %>%
      ungroup()
    
    if (nrow(comparison_data) > 0) {
      # Reshape for line chart
      line_data <- comparison_data %>%
        select(Batter, PA_Number, Cumulative_xwOBA, Cumulative_wOBA, Cumulative_xwOBACON, Cumulative_wOBACON) %>%
        pivot_longer(cols = starts_with("Cumulative"), names_to = "Metric", values_to = "Value") %>%
        mutate(
          Metric = gsub("Cumulative_", "", Metric),
          Line_Type = ifelse(grepl("x", Metric), "Expected", "Actual"),
          Metric_Type = ifelse(grepl("OBACON", Metric), "wOBACON", "wOBA")
        )
      
      ggplot(line_data, aes(x = PA_Number, y = Value, color = Batter, linetype = Line_Type)) +
        geom_line(size = 1.2, alpha = 0.8) +
        facet_wrap(~Metric_Type, scales = "free_y") +
        scale_color_manual(values = c("#667eea", "#764ba2")) +
        scale_linetype_manual(values = c("Expected" = "solid", "Actual" = "dashed")) +
        labs(title = paste("Performance Comparison:", input$comp_player1, "vs", input$comp_player2),
             subtitle = "Cumulative performance over plate appearances",
             x = "Plate Appearance Number", y = "Cumulative Value",
             color = "Player", linetype = "Type") +
        theme_minimal() +
        theme(
          plot.title = element_text(size = 16, face = "bold"),
          legend.position = "top"
        )
    } else {
      ggplot() + 
        geom_text(aes(x = 0.5, y = 0.5, label = "No data for selected players"), size = 6) +
        theme_void()
    }
  })
  
  # Underperformers Table
  output$underperformers <- DT::renderDataTable({
    current_data <- get_filtered_data()
    pa_threshold <- as.numeric(input$pa_threshold)
    min_pa <- max(20, pa_threshold)
    
    underperformers_table <- current_data %>%
      group_by(Batter) %>%
      summarise(
        PA = n(),
        Expected = round(mean(predicted_xwoba, na.rm = TRUE), 3),
        Actual = round(mean(if("actual_woba_final" %in% names(current_data)) actual_woba_final else actual_woba, na.rm = TRUE), 3),
        Team = if("BatterTeam" %in% names(current_data)) first(BatterTeam) else "Unknown",
        Data_Source = if("data_source" %in% names(current_data)) first(data_source) else "Model",
        .groups = "drop"
      ) %>%
      mutate(Difference = Expected - Actual) %>%
      filter(PA >= min_pa, Difference > 0.025) %>%
      arrange(desc(Difference))
    
    if (nrow(underperformers_table) > 0) {
      DT::datatable(underperformers_table, options = list(pageLength = 15, scrollX = TRUE)) %>%
        formatRound(columns = c('Expected', 'Actual', 'Difference'), digits = 3) %>%
        formatStyle('Difference', backgroundColor = '#d4edda')
    } else {
      data.frame(Message = "No underperforming players found")
    }
  })
  
  # Overperformers Table
  output$overperformers <- DT::renderDataTable({
    current_data <- get_filtered_data()
    pa_threshold <- as.numeric(input$pa_threshold)
    min_pa <- max(20, pa_threshold)
    
    overperformers_table <- current_data %>%
      group_by(Batter) %>%
      summarise(
        PA = n(),
        Expected = round(mean(predicted_xwoba, na.rm = TRUE), 3),
        Actual = round(mean(if("actual_woba_final" %in% names(current_data)) actual_woba_final else actual_woba, na.rm = TRUE), 3),
        Team = if("BatterTeam" %in% names(current_data)) first(BatterTeam) else "Unknown",
        Data_Source = if("data_source" %in% names(current_data)) first(data_source) else "Model",
        .groups = "drop"
      ) %>%
      mutate(Difference = Actual - Expected) %>%
      filter(PA >= min_pa, Difference > 0.025) %>%
      arrange(desc(Difference))
    
    if (nrow(overperformers_table) > 0) {
      DT::datatable(overperformers_table, options = list(pageLength = 15, scrollX = TRUE)) %>%
        formatRound(columns = c('Expected', 'Actual', 'Difference'), digits = 3) %>%
        formatStyle('Difference', backgroundColor = '#f8d7da')
    } else {
      data.frame(Message = "No overperforming players found")
    }
  })
  
  # Comparison Summary Table
  output$comparison_summary <- DT::renderDataTable({
    req(input$comp_player1, input$comp_player2)
    
    current_data <- get_filtered_data()
    
    if ("Date" %in% names(current_data)) {
      current_data <- current_data %>%
        filter(Date >= input$comp_date_range[1], Date <= input$comp_date_range[2])
    }
    
    comparison_summary <- current_data %>%
      filter(Batter %in% c(input$comp_player1, input$comp_player2)) %>%
      group_by(Batter) %>%
      summarise(
        PA = n(),
        Avg_xwOBA = round(mean(predicted_xwoba, na.rm = TRUE), 3),
        Avg_wOBA = round(mean(if("actual_woba_final" %in% names(current_data)) actual_woba_final else actual_woba, na.rm = TRUE), 3),
        Avg_xwOBACON = round(mean(predicted_xwoba, na.rm = TRUE), 3),  # Proxy
        Avg_wOBACON = round(mean(if("actual_wobacon_final" %in% names(current_data)) actual_wobacon_final else actual_woba, na.rm = TRUE), 3),
        Performance_Gap = round(mean(predicted_xwoba, na.rm = TRUE) - mean(if("actual_woba_final" %in% names(current_data)) actual_woba_final else actual_woba, na.rm = TRUE), 3),
        Team = if("BatterTeam" %in% names(current_data)) first(BatterTeam) else "Unknown",
        .groups = "drop"
      )
    
    DT::datatable(comparison_summary, options = list(pageLength = 15, scrollX = TRUE)) %>%
      formatRound(columns = c('Avg_xwOBA', 'Avg_wOBA', 'Avg_xwOBACON', 'Avg_wOBACON', 'Performance_Gap'), digits = 3)
  })
  
  # Team & Player Browser
  output$browser_table <- DT::renderDataTable({
    current_data <- get_filtered_data()
    
    # Apply additional filters
    if (!is.null(input$browser_team) && input$browser_team != "All") {
      if ("BatterTeam" %in% names(current_data)) {
        current_data <- current_data %>% filter(BatterTeam == input$browser_team)
      }
    }
    
    if (!is.null(input$browser_player) && input$browser_player != "All") {
      current_data <- current_data %>% filter(Batter == input$browser_player)
    }
    
    browser_data <- current_data %>%
      group_by(Batter) %>%
      summarise(
        PA_Count = n(),
        Avg_xwOBA = round(mean(predicted_xwoba, na.rm = TRUE), 3),
        Avg_wOBA = round(mean(if("actual_woba_final" %in% names(current_data)) actual_woba_final else actual_woba, na.rm = TRUE), 3),
        Avg_xwOBACON = round(mean(predicted_xwoba, na.rm = TRUE), 3),  # Proxy
        Avg_wOBACON = round(mean(if("actual_wobacon_final" %in% names(current_data)) actual_wobacon_final else actual_woba, na.rm = TRUE), 3),
        Performance_Gap = round(mean(predicted_xwoba, na.rm = TRUE) - mean(if("actual_woba_final" %in% names(current_data)) actual_woba_final else actual_woba, na.rm = TRUE), 3),
        Team = if("BatterTeam" %in% names(current_data)) first(BatterTeam) else "Unknown",
        Data_Source = if("data_source" %in% names(current_data)) first(data_source) else "Model",
        .groups = "drop"
      ) %>%
      arrange(desc(get(input$browser_sort)))
    
    DT::datatable(browser_data, options = list(pageLength = 20, scrollX = TRUE)) %>%
      formatRound(columns = c('Avg_xwOBA', 'Avg_wOBA', 'Avg_xwOBACON', 'Avg_wOBACON', 'Performance_Gap'), digits = 3)
  })
  
} # End server function

# Run the application 
shinyApp(ui = ui, server = server)
